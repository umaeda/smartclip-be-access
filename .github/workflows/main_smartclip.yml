# Docs for the Azure Web Apps Deploy action: https://github.com/azure/functions-action
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure Functions: https://aka.ms/python-webapps-actions

name: Build and Deploy FastAPI Container to Azure Function App - smartclip

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_NAME: 'smartclip'          # Nome do seu Function App (confirmar se está correto)
  ACR_NAME: 'smartclip'                          # !!! Substitua pelo nome do seu Azure Container Registry (sem .azurecr.io) !!!
  IMAGE_NAME: 'smartclip-fastapi'             # Nome que você quer dar para a imagem Docker

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # Não são necessárias permissões especiais aqui se usar o login padrão do Azure

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Login no Azure usando os segredos existentes (Service Principal)
      # Garanta que este SP tenha as roles:
      # - AcrPush (no seu ACR)
      # - Contributor ou Website Contributor (no seu Function App)
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_31EBBC624F474C89A96B6E581F781A03 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_EF7C8D2182104D628786BDD638F1C935 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_576E4F27674842098E7045F1B6B641C4 }}

      # Login no Azure Container Registry (ACR) usando a CLI do Azure
      - name: Log in to Azure Container Registry
        run: az acr login --name ${{ env.ACR_NAME }}

      # Build da imagem Docker usando o Dockerfile na raiz do projeto
      # Tag: Define a tag como nome_completo_no_acr:sha_do_commit e nome_completo_no_acr:latest
      - name: Build Docker image
        run: |
          docker build . -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest

      # Push da imagem Docker para o ACR (ambas as tags)
      - name: Push Docker image to ACR
        run: |
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest

      # Deploy da imagem do container para o Azure Function App
      # Assume que o Function App está configurado para usar Managed Identity com role AcrPull no ACR.
      - name: Deploy to Azure Functions Container App
        uses: azure/functions-container-action@v1
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          # slot-name: 'Production' # O padrão já é Production
          image: ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          # Se o Function App NÃO usar Managed Identity para puxar a imagem do ACR,
          # forneça as credenciais do ACR aqui (crie os segredos ACR_USERNAME/ACR_PASSWORD no GitHub):
          # registry-username: ${{ secrets.ACR_USERNAME }}
          # registry-password: ${{ secrets.ACR_PASSWORD }}

      # Opcional: Logout da sessão da CLI do Azure
      - name: Logout from Azure
        if: always() # Executa mesmo se passos anteriores falharem
        run: az logout --username ${{ secrets.AZUREAPPSERVICE_CLIENTID_31EBBC624F474C89A96B6E581F781A03 }}
        # Nota: Usar o client-id para logout assume que o SP fez o login.
          